/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.conan.myhadoop.HadoopDefinitiveGuide.chap04;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** A weather reading */
@org.apache.avro.specific.AvroGenerated
public class WeatherRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3048756094748517513L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"WeatherRecord\",\"namespace\":\"org.conan.myhadoop.HadoopDefinitiveGuide.chap04\",\"doc\":\"A weather reading\",\"fields\":[{\"name\":\"year\",\"type\":\"int\"},{\"name\":\"temperature\",\"type\":\"int\"},{\"name\":\"stationID\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int year;
  @Deprecated public int temperature;
  @Deprecated public CharSequence stationID;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public WeatherRecord() {}

  /**
   * All-args constructor.
   * @param year The new value for year
   * @param temperature The new value for temperature
   * @param stationID The new value for stationID
   */
  public WeatherRecord(Integer year, Integer temperature, CharSequence stationID) {
    this.year = year;
    this.temperature = temperature;
    this.stationID = stationID;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return year;
    case 1: return temperature;
    case 2: return stationID;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: year = (Integer)value$; break;
    case 1: temperature = (Integer)value$; break;
    case 2: stationID = (CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'year' field.
   * @return The value of the 'year' field.
   */
  public Integer getYear() {
    return year;
  }

  /**
   * Sets the value of the 'year' field.
   * @param value the value to set.
   */
  public void setYear(Integer value) {
    this.year = value;
  }

  /**
   * Gets the value of the 'temperature' field.
   * @return The value of the 'temperature' field.
   */
  public Integer getTemperature() {
    return temperature;
  }

  /**
   * Sets the value of the 'temperature' field.
   * @param value the value to set.
   */
  public void setTemperature(Integer value) {
    this.temperature = value;
  }

  /**
   * Gets the value of the 'stationID' field.
   * @return The value of the 'stationID' field.
   */
  public CharSequence getStationID() {
    return stationID;
  }

  /**
   * Sets the value of the 'stationID' field.
   * @param value the value to set.
   */
  public void setStationID(CharSequence value) {
    this.stationID = value;
  }

  /**
   * Creates a new WeatherRecord RecordBuilder.
   * @return A new WeatherRecord RecordBuilder
   */
  public static WeatherRecord.Builder newBuilder() {
    return new WeatherRecord.Builder();
  }

  /**
   * Creates a new WeatherRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new WeatherRecord RecordBuilder
   */
  public static WeatherRecord.Builder newBuilder(WeatherRecord.Builder other) {
    return new WeatherRecord.Builder(other);
  }

  /**
   * Creates a new WeatherRecord RecordBuilder by copying an existing WeatherRecord instance.
   * @param other The existing instance to copy.
   * @return A new WeatherRecord RecordBuilder
   */
  public static WeatherRecord.Builder newBuilder(WeatherRecord other) {
    return new WeatherRecord.Builder(other);
  }

  /**
   * RecordBuilder for WeatherRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<WeatherRecord>
    implements org.apache.avro.data.RecordBuilder<WeatherRecord> {

    private int year;
    private int temperature;
    private CharSequence stationID;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(WeatherRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.year)) {
        this.year = data().deepCopy(fields()[0].schema(), other.year);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.temperature)) {
        this.temperature = data().deepCopy(fields()[1].schema(), other.temperature);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.stationID)) {
        this.stationID = data().deepCopy(fields()[2].schema(), other.stationID);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing WeatherRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(WeatherRecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.year)) {
        this.year = data().deepCopy(fields()[0].schema(), other.year);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.temperature)) {
        this.temperature = data().deepCopy(fields()[1].schema(), other.temperature);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.stationID)) {
        this.stationID = data().deepCopy(fields()[2].schema(), other.stationID);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'year' field.
      * @return The value.
      */
    public Integer getYear() {
      return year;
    }

    /**
      * Sets the value of the 'year' field.
      * @param value The value of 'year'.
      * @return This builder.
      */
    public WeatherRecord.Builder setYear(int value) {
      validate(fields()[0], value);
      this.year = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'year' field has been set.
      * @return True if the 'year' field has been set, false otherwise.
      */
    public boolean hasYear() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'year' field.
      * @return This builder.
      */
    public WeatherRecord.Builder clearYear() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'temperature' field.
      * @return The value.
      */
    public Integer getTemperature() {
      return temperature;
    }

    /**
      * Sets the value of the 'temperature' field.
      * @param value The value of 'temperature'.
      * @return This builder.
      */
    public WeatherRecord.Builder setTemperature(int value) {
      validate(fields()[1], value);
      this.temperature = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'temperature' field has been set.
      * @return True if the 'temperature' field has been set, false otherwise.
      */
    public boolean hasTemperature() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'temperature' field.
      * @return This builder.
      */
    public WeatherRecord.Builder clearTemperature() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'stationID' field.
      * @return The value.
      */
    public CharSequence getStationID() {
      return stationID;
    }

    /**
      * Sets the value of the 'stationID' field.
      * @param value The value of 'stationID'.
      * @return This builder.
      */
    public WeatherRecord.Builder setStationID(CharSequence value) {
      validate(fields()[2], value);
      this.stationID = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'stationID' field has been set.
      * @return True if the 'stationID' field has been set, false otherwise.
      */
    public boolean hasStationID() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'stationID' field.
      * @return This builder.
      */
    public WeatherRecord.Builder clearStationID() {
      stationID = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public WeatherRecord build() {
      try {
        WeatherRecord record = new WeatherRecord();
        record.year = fieldSetFlags()[0] ? this.year : (Integer) defaultValue(fields()[0]);
        record.temperature = fieldSetFlags()[1] ? this.temperature : (Integer) defaultValue(fields()[1]);
        record.stationID = fieldSetFlags()[2] ? this.stationID : (CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
